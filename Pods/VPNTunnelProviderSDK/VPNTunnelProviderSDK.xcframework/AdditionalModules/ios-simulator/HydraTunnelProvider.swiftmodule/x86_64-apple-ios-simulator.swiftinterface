// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HydraTunnelProvider
import Foundation
import HydraTunnelProviderObjc
import NetworkExtension
import Swift
import _Concurrency
import os.log
import os
extension Swift.KeyedEncodingContainer {
  public mutating func encode(_ value: [Swift.String : Any], forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encode(_ value: [Any], forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encodeIfPresent(_ value: [Swift.String : Any]?, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encodeIfPresent(_ value: [Any]?, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
}
public enum TunnelError : Swift.Error {
  case notConfigured
  case interfaceChange
  case tunInterfaceFailure
  case systemCalledStop(isUserInitiated: Swift.Bool)
  case systemCalledSleep
  case badConfiguration
  case connectionTimeout
  case connectionCanceled
  case hydraInternalError(code: Swift.Int, name: Swift.String?)
  case failedToSetNetworkSettings
  case delegateRestrictsConnect
  case failedToReconfigureHydra
  case unknown
}
extension HydraTunnelProvider.TunnelError : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension HydraTunnelProvider.TunnelError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension HydraTunnelProvider.TunnelError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public protocol TunnelInfoProviderProtocol {
  func getHydraSdMainConnectionInfo(isSucceeded: Swift.Bool) -> [[Swift.AnyHashable : Any]]
  func getHydraVersion() -> Swift.String
  func getHydraGlobalSessionID() -> Swift.String
  func getSystemDNSServers() -> (ipv4: [Swift.String], ipv6: [Swift.String])
}
public struct DataCounter {
  public let transmitted: Swift.UInt64
  public let received: Swift.UInt64
  public let date: Foundation.Date
}
extension HydraTunnelProvider.DataCounter : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension HydraTunnelProvider.DataCounter : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct Categorization : Swift.Codable {
  public enum CategorizationType : Swift.Int {
    case none
    case url
    case ip
    case domain
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Action : Swift.Int {
    case proxy
    case vpn
    case bypass
    case block
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public let resource: Swift.String
  public let type: HydraTunnelProvider.Categorization.CategorizationType
  public let action: HydraTunnelProvider.Categorization.Action
  public let categoryLabel: Swift.String
  public let categoryID: Swift.Int
  public let sources: [Swift.String]
  public let customLabels: [Swift.String]
  public let proto: Swift.Int
  public let port: Swift.Int
  public let timestamp: Foundation.Date
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension HydraTunnelProvider.Categorization : Swift.Equatable {
  public static func == (lhs: HydraTunnelProvider.Categorization, rhs: HydraTunnelProvider.Categorization) -> Swift.Bool
}
extension HydraTunnelProvider.Categorization.CategorizationType : Swift.Codable {
}
extension HydraTunnelProvider.Categorization.Action : Swift.Codable {
}
public protocol FireshieldControllerProtocol {
  func scannedConnections() -> Swift.Int
  func updateFireshieldCategories(with categories: [[Swift.String : Any]]) throws
  func updateFireshieldCustomList(withItems items: [Swift.String], command: HydraTunnelProvider.FireshieldCustomListCommand, resourceType: HydraTunnelProvider.FireshieldCustomListResourceType, forCategory category: Swift.String) throws
}
public enum FireshieldCustomListCommand {
  case add, remove
  public static func == (a: HydraTunnelProvider.FireshieldCustomListCommand, b: HydraTunnelProvider.FireshieldCustomListCommand) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FireshieldCustomListResourceType {
  case domain, url
  public static func == (a: HydraTunnelProvider.FireshieldCustomListResourceType, b: HydraTunnelProvider.FireshieldCustomListResourceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class Configuration : ObjectiveC.NSObject, Foundation.NSSecureCoding, Swift.Codable {
  public var groupID: Swift.String
  public var serverDisplayName: Swift.String
  public var tunBypassMode: Swift.Bool
  public var dnsOnlyMode: Swift.Bool
  public var timeoutSeconds: Swift.Int
  public var onDemandRules: [NetworkExtension.NEOnDemandRule]?
  public var hydraCert: Swift.String?
  public var stayConnectedDuringDeviceSleep: Swift.Bool
  public var remoteTunEnabled: Swift.Bool
  public var enableVPNIconFix: Swift.Bool
  public var fireshieldInvisibleMode: Swift.Bool
  public var isDebugLoggingEnabled: Swift.Bool
  public var hydraConfig: [Swift.String : Any]?
  public var tunDNSServers: [Swift.String]?
  public init?(dictionary: [Swift.String : Any])
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc public static var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  public var sessionId: Swift.String? {
    get
    set
  }
  public var bypassDNSServer: Swift.String? {
    get
    set
  }
  @objc deinit
}
public protocol TunnelProviderDelegate : ObjectiveC.NSObject {
  func tunnelProviderDidInitialize(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, infoProvider: HydraTunnelProvider.TunnelInfoProviderProtocol, fireshieldController: HydraTunnelProvider.FireshieldControllerProtocol)
  func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, willConnectWith config: HydraTunnelProvider.Configuration, cachedGroupID: Swift.String?, options: [Swift.String : ObjectiveC.NSObject]?, startContinuation: @escaping (_ shouldContinue: Swift.Bool) -> Swift.Void)
  func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, didConnectWith config: HydraTunnelProvider.Configuration)
  func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, willDisconnectWith config: HydraTunnelProvider.Configuration, error: HydraTunnelProvider.TunnelError?, canRestart: Swift.Bool, stopContinuation: @escaping (_ shouldRestart: Swift.Bool) -> Swift.Void)
  func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, willReconfigureWith config: HydraTunnelProvider.Configuration, reconfigureContinuation: @escaping () -> Swift.Void)
  func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, didHandleCategorization categorization: HydraTunnelProvider.Categorization)
  func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, didReceiveTrafficInfo dataCounter: HydraTunnelProvider.DataCounter)
  func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, didReceiveLogMessage message: Swift.String)
}
extension HydraTunnelProvider.TunnelProviderDelegate {
  public func tunnelProviderDidInitialize(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, infoProvider: HydraTunnelProvider.TunnelInfoProviderProtocol, fireshieldController: HydraTunnelProvider.FireshieldControllerProtocol)
  public func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, willConnectWith config: HydraTunnelProvider.Configuration, cachedGroupID: Swift.String?, options: [Swift.String : ObjectiveC.NSObject]?, startContinuation: @escaping (_ shouldContinue: Swift.Bool) -> Swift.Void)
  public func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, didConnectWith config: HydraTunnelProvider.Configuration)
  public func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, willDisconnectWith config: HydraTunnelProvider.Configuration, error: HydraTunnelProvider.TunnelError?, canRestart: Swift.Bool, stopContinuation: @escaping (_ shouldRestart: Swift.Bool) -> Swift.Void)
  public func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, willReconfigureWith config: HydraTunnelProvider.Configuration, reconfigureContinuation: @escaping () -> Swift.Void)
  public func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, didHandleCategorization categorization: HydraTunnelProvider.Categorization)
  public func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, didReceiveTrafficInfo dataCounter: HydraTunnelProvider.DataCounter)
  public func tunnelProvider(_ tunnelProvider: NetworkExtension.NEPacketTunnelProvider, didReceiveLogMessage message: Swift.String)
}
public enum NetworkInfo {
  public static func currentInterfaceName() -> Swift.String?
}
extension HydraTunnelProvider.Categorization.CategorizationType : Swift.Equatable {}
extension HydraTunnelProvider.Categorization.CategorizationType : Swift.Hashable {}
extension HydraTunnelProvider.Categorization.CategorizationType : Swift.RawRepresentable {}
extension HydraTunnelProvider.Categorization.Action : Swift.Equatable {}
extension HydraTunnelProvider.Categorization.Action : Swift.Hashable {}
extension HydraTunnelProvider.Categorization.Action : Swift.RawRepresentable {}
extension HydraTunnelProvider.FireshieldCustomListCommand : Swift.Equatable {}
extension HydraTunnelProvider.FireshieldCustomListCommand : Swift.Hashable {}
extension HydraTunnelProvider.FireshieldCustomListResourceType : Swift.Equatable {}
extension HydraTunnelProvider.FireshieldCustomListResourceType : Swift.Hashable {}
