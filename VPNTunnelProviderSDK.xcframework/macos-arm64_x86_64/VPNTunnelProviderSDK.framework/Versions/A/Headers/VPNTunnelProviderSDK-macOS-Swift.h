#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef VPNTUNNELPROVIDERSDK_SWIFT_H
#define VPNTUNNELPROVIDERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import NetworkExtension;
@import ObjectiveC;
#endif

#import <VPNTunnelProviderSDK/VPNTunnelProviderSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VPNTunnelProviderSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK14AFCategoryType")
@interface AFCategoryType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AFCategoryType * _Nonnull safe;)
+ (AFCategoryType * _Nonnull)safe SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AFCategoryType * _Nonnull unsafe;)
+ (AFCategoryType * _Nonnull)unsafe SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull representation;
- (nonnull instancetype)initWithCustom:(NSString * _Nonnull)custom OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUnsafeCustom:(NSString * _Nonnull)unsafeCustom OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum AFClientNetworkConfigurationAction : NSInteger;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK28AFClientNetworkConfiguration")
@interface AFClientNetworkConfiguration : NSObject
@property (nonatomic, readonly) enum AFClientNetworkConfigurationAction action;
@property (nonatomic, readonly, copy) NSString * _Nullable networkType;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable ssid;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable bssid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AFClientNetworkConfigurationAction, open) {
  AFClientNetworkConfigurationActionEnable = 0,
  AFClientNetworkConfigurationActionDisable = 1,
  AFClientNetworkConfigurationActionEmpty = 2,
};


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK19AFClientNetworkList")
@interface AFClientNetworkList : NSObject
@property (nonatomic, readonly, copy) NSArray<AFClientNetworkConfiguration *> * _Nonnull configurations;
- (AFClientNetworkConfiguration * _Nullable)findWithSsid:(NSString * _Nonnull)ssid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK20AFFireshieldCategory")
@interface AFFireshieldCategory : NSObject
+ (AFFireshieldCategory * _Nonnull)blockWithCategory:(AFCategoryType * _Nonnull)category SWIFT_WARN_UNUSED_RESULT;
+ (AFFireshieldCategory * _Nonnull)proxyWithCategory:(AFCategoryType * _Nonnull)category SWIFT_WARN_UNUSED_RESULT;
+ (AFFireshieldCategory * _Nonnull)bypassWithCategory:(AFCategoryType * _Nonnull)category SWIFT_WARN_UNUSED_RESULT;
+ (AFFireshieldCategory * _Nonnull)alertWithCategory:(AFCategoryType * _Nonnull)category SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)categoryNameFrom:(AFCategoryType * _Nonnull)category SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, Action, open) {
  ActionProxy = 0,
  ActionBypass = 1,
  ActionBlock = 2,
  ActionAlert = 3,
};

@class NSCoder;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK17AFTrafficCounters")
@interface AFTrafficCounters : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) uint64_t received;
@property (nonatomic, readonly) uint64_t transmitted;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AFTunnelError, open) {
  AFTunnelErrorNotConfigured = 1,
  AFTunnelErrorInterfaceChange = 2,
  AFTunnelErrorTunInterfaceFailure = 3,
  AFTunnelErrorSystemCalledStop = 4,
  AFTunnelErrorSystemCalledSleep = 5,
  AFTunnelErrorBadConfiguration = 6,
  AFTunnelErrorConnectionTimeout = 7,
  AFTunnelErrorConnectionCanceled = 8,
  AFTunnelErrorHydraInternalError = 9,
  AFTunnelErrorFailedToSetNetworkSettings = 10,
  AFTunnelErrorDelegateRestrictsConnect = 11,
  AFTunnelErrorFailedToReconfigureHydra = 12,
  AFTunnelErrorUnknown = 13,
};

typedef SWIFT_ENUM(NSInteger, AFTunnelHydraInternalError, open) {
  AFTunnelHydraInternalErrorConnectionDisrupted = 181,
  AFTunnelHydraInternalErrorConnectionNotEstablished = 182,
  AFTunnelHydraInternalErrorTokenInvalid = 186,
  AFTunnelHydraInternalErrorTrafficExceed = 191,
};

enum CategorizationType : NSInteger;
enum CategorizationAction : NSInteger;
@class NSDate;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK19AFVPNCategorization")
@interface AFVPNCategorization : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull resource;
@property (nonatomic, readonly) enum CategorizationType type;
@property (nonatomic, readonly) enum CategorizationAction action;
@property (nonatomic, readonly, copy) NSString * _Nonnull categoryLabel;
@property (nonatomic, readonly) NSInteger categoryID;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull sources;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull customLabels;
@property (nonatomic, readonly) NSInteger proto;
@property (nonatomic, readonly) NSInteger port;
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK13CNLRepository")
@interface CNLRepository : NSObject
@property (nonatomic) BOOL isClientListEnabled;
- (nonnull instancetype)initWithSuitName:(NSString * _Nonnull)suitName OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) AFClientNetworkList * _Nullable list;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK13Configuration")
@interface Configuration : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP20VPNTunnelProviderSDK9LogSource_")
@protocol LogSource
- (void)logWithString:(NSString * _Nonnull)string;
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK16ConsoleLogSource")
@interface ConsoleLogSource : NSObject <LogSource>
- (void)logWithString:(NSString * _Nonnull)string;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSURL;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK13FileLogSource")
@interface FileLogSource : NSObject <LogSource>
- (nonnull instancetype)initWithFileURL:(NSURL * _Nonnull)fileURL OBJC_DESIGNATED_INITIALIZER;
- (void)logWithString:(NSString * _Nonnull)string;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, FireshieldListResourceType, open) {
  FireshieldListResourceTypeDomain = 0,
  FireshieldListResourceTypeUrl = 1,
};


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK17FireshieldManager")
@interface FireshieldManager : NSObject
- (BOOL)addItems:(NSArray<NSString *> * _Nonnull)items withResourceType:(enum FireshieldListResourceType)resourceType category:(AFCategoryType * _Nonnull)category error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeItems:(NSArray<NSString *> * _Nonnull)items withResourceType:(enum FireshieldListResourceType)resourceType category:(AFCategoryType * _Nonnull)category error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








SWIFT_CLASS("_TtC20VPNTunnelProviderSDK17NetworkIdentifier")
@interface NetworkIdentifier : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable ssid;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK15NetworkObserver")
@interface NetworkObserver : NSObject
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK18SessionDataStorage")
@interface SessionDataStorage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC20VPNTunnelProviderSDK14StartupOptions")
@interface StartupOptions : NSObject
@property (nonatomic, readonly) BOOL isBypassEnabled;
- (nonnull instancetype)initWithIsBypassEnabled:(BOOL)isBypassEnabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a single ping instance. A ping instance has a single destination.
SWIFT_CLASS("_TtC20VPNTunnelProviderSDK10SwiftyPing")
@interface SwiftyPing : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK16TunnelDataSource")
@interface TunnelDataSource : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

SWIFT_CLASS_NAMED("TunnelProvider")
@interface AFHydraTunnelProvider : AFLegacyHydraTunnelProvider
- (void)startTunnelWithOptions:(NSDictionary<NSString *, NSObject *> * _Nullable)options completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
- (void)stopTunnelWithReason:(NEProviderStopReason)reason completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)sleepWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)handleAppMessage:(NSData * _Nonnull)messageData completionHandler:(void (^ _Nullable)(NSData * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_CLASS_NAMED("TunnelProviderDelegateImpl")
@interface TunnelProviderDelegateImpl : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_CLASS("_TtC20VPNTunnelProviderSDK16UCRConfiguration")
@interface UCRConfiguration : NSObject
- (nonnull instancetype)initWithReportName:(NSString * _Nonnull)reportName cacheName:(NSString * _Nullable)cacheName appGroup:(NSString * _Nullable)appGroup keychainAccessGroup:(NSString * _Nullable)keychainAccessGroup isLoggingEnabled:(BOOL)isLoggingEnabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK8UCREvent")
@interface UCREvent : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name properties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK10UCRTracker")
@interface UCRTracker : NSObject
- (nonnull instancetype)initWithConfiguration:(UCRConfiguration * _Nonnull)configuration;
/// Registers app name. Will be included in auto collected properties.
/// Isn’t persisted between launches.
- (void)registerAppName:(NSString * _Nonnull)newValue;
/// Registers vpn protocol. Will be included in auto collected properties.
/// Isn’t persisted between launches.
- (void)registerServerProtocol:(NSString * _Nonnull)newValue;
/// Registers user token. Will be included in auto collected properties.
/// Isn’t persisted between launches.
- (void)registerServerToken:(NSString * _Nonnull)newValue;
/// Registers super properties. These properties have higher priority then
/// auto collected properties and lower priority then properties passed with event.
/// Aren’t persisted between launches.
- (void)registerProperties:(NSDictionary<NSString *, id> * _Nullable)newValue;
/// Registers callback that will be called after every queued event with assotiated data.
- (void)registerEventLoggingCallback:(void (^ _Nullable)(NSString * _Nonnull, NSDate * _Nonnull, NSDictionary<NSString *, id> * _Nonnull))callback;
/// Sets automatic event sending timer interval.
/// Values less or equal to <code>0</code>mean disable timer.
- (void)setSendEventsInterval:(NSTimeInterval)newValue;
/// Enables/disables automatic event sending when app enters background.
- (void)setShouldSendEventsOnBackground:(BOOL)newValue;
/// Adds event to queue.
/// \param completion 
/// Completion handler with result. Will be dispatched to the main queue.
///
- (void)trackEvent:(NSString * _Nonnull)event withProperties:(NSDictionary<NSString *, id> * _Nullable)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds events to queue.
/// \param completion 
/// Completion handler with result. Will be dispatched to the main queue.
///
- (void)trackEvents:(NSArray<UCREvent *> * _Nonnull)events withCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sends collected events to the server.
/// \param completion 
/// Completion handler with result. Will be dispatched to the main queue.
/// <code>Int</code> value represents count of sended events.
///
- (void)sendEventsWithCompletion:(void (^ _Nullable)(NSInteger, NSError * _Nullable))completion;
/// Cancels events sending to server if it’s active.
- (void)cancelEventsSending;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface UCRTracker (SWIFT_EXTENSION(VPNTunnelProviderSDK))
/// Configures shared instance.
/// Should be called before first access to shared instance.
+ (void)configureSharedWithConfiguration:(UCRConfiguration * _Nonnull)config;
/// Shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UCRTracker * _Nonnull shared;)
+ (UCRTracker * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK22UserDefaultsRepository")
@interface UserDefaultsRepository : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK17VPNConnectionData")
@interface VPNConnectionData : NSObject
@property (nonatomic, readonly) BOOL hasActiveSession;
- (void)registerStartAttemptWithTriggeredByUser:(BOOL)triggeredByUser parentConnectionID:(NSString * _Nullable)parentConnectionID;
- (void)registerDidStart;
- (void)registerWillStopWithTriggeredByUser:(BOOL)triggeredByUser;
- (void)registerStartAttemptAsLastFailed;
- (void)setConnectionInfoWithServerIP:(NSString * _Nullable)serverIP sessionID:(NSString * _Nullable)sessionID;
- (void)setCountryCode:(NSString * _Nullable)newValue;
- (void)setTrafficInfoWithBytesIn:(NSNumber * _Nullable)bytesIn bytesOut:(NSNumber * _Nullable)bytesOut;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK6VPNLog")
@interface VPNLog : NSObject
+ (void)setLogSourceWithArray:(NSArray<id <LogSource>> * _Nonnull)array;
+ (void)verbose:(NSString * _Nonnull)string;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, VPNProtocolType, open) {
  VPNProtocolTypeHydra = 0,
  VPNProtocolTypeIpsec = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef VPNTUNNELPROVIDERSDK_SWIFT_H
#define VPNTUNNELPROVIDERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import NetworkExtension;
@import ObjectiveC;
#endif

#import <VPNTunnelProviderSDK/VPNTunnelProviderSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VPNTunnelProviderSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK14AFCategoryType")
@interface AFCategoryType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AFCategoryType * _Nonnull safe;)
+ (AFCategoryType * _Nonnull)safe SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AFCategoryType * _Nonnull unsafe;)
+ (AFCategoryType * _Nonnull)unsafe SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull representation;
- (nonnull instancetype)initWithCustom:(NSString * _Nonnull)custom OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUnsafeCustom:(NSString * _Nonnull)unsafeCustom OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum AFClientNetworkConfigurationAction : NSInteger;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK28AFClientNetworkConfiguration")
@interface AFClientNetworkConfiguration : NSObject
@property (nonatomic, readonly) enum AFClientNetworkConfigurationAction action;
@property (nonatomic, readonly, copy) NSString * _Nullable networkType;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable ssid;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable bssid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AFClientNetworkConfigurationAction, open) {
  AFClientNetworkConfigurationActionEnable = 0,
  AFClientNetworkConfigurationActionDisable = 1,
  AFClientNetworkConfigurationActionEmpty = 2,
};


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK19AFClientNetworkList")
@interface AFClientNetworkList : NSObject
@property (nonatomic, readonly, copy) NSArray<AFClientNetworkConfiguration *> * _Nonnull configurations;
- (AFClientNetworkConfiguration * _Nullable)findWithSsid:(NSString * _Nonnull)ssid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK20AFFireshieldCategory")
@interface AFFireshieldCategory : NSObject
+ (AFFireshieldCategory * _Nonnull)blockWithCategory:(AFCategoryType * _Nonnull)category SWIFT_WARN_UNUSED_RESULT;
+ (AFFireshieldCategory * _Nonnull)proxyWithCategory:(AFCategoryType * _Nonnull)category SWIFT_WARN_UNUSED_RESULT;
+ (AFFireshieldCategory * _Nonnull)bypassWithCategory:(AFCategoryType * _Nonnull)category SWIFT_WARN_UNUSED_RESULT;
+ (AFFireshieldCategory * _Nonnull)alertWithCategory:(AFCategoryType * _Nonnull)category SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)categoryNameFrom:(AFCategoryType * _Nonnull)category SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, Action, open) {
  ActionProxy = 0,
  ActionBypass = 1,
  ActionBlock = 2,
  ActionAlert = 3,
};

@class NSCoder;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK17AFTrafficCounters")
@interface AFTrafficCounters : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) uint64_t received;
@property (nonatomic, readonly) uint64_t transmitted;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AFTunnelError, open) {
  AFTunnelErrorNotConfigured = 1,
  AFTunnelErrorInterfaceChange = 2,
  AFTunnelErrorTunInterfaceFailure = 3,
  AFTunnelErrorSystemCalledStop = 4,
  AFTunnelErrorSystemCalledSleep = 5,
  AFTunnelErrorBadConfiguration = 6,
  AFTunnelErrorConnectionTimeout = 7,
  AFTunnelErrorConnectionCanceled = 8,
  AFTunnelErrorHydraInternalError = 9,
  AFTunnelErrorFailedToSetNetworkSettings = 10,
  AFTunnelErrorDelegateRestrictsConnect = 11,
  AFTunnelErrorFailedToReconfigureHydra = 12,
  AFTunnelErrorUnknown = 13,
};

typedef SWIFT_ENUM(NSInteger, AFTunnelHydraInternalError, open) {
  AFTunnelHydraInternalErrorConnectionDisrupted = 181,
  AFTunnelHydraInternalErrorConnectionNotEstablished = 182,
  AFTunnelHydraInternalErrorTokenInvalid = 186,
  AFTunnelHydraInternalErrorTrafficExceed = 191,
};

enum CategorizationType : NSInteger;
enum CategorizationAction : NSInteger;
@class NSDate;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK19AFVPNCategorization")
@interface AFVPNCategorization : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull resource;
@property (nonatomic, readonly) enum CategorizationType type;
@property (nonatomic, readonly) enum CategorizationAction action;
@property (nonatomic, readonly, copy) NSString * _Nonnull categoryLabel;
@property (nonatomic, readonly) NSInteger categoryID;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull sources;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull customLabels;
@property (nonatomic, readonly) NSInteger proto;
@property (nonatomic, readonly) NSInteger port;
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK13CNLRepository")
@interface CNLRepository : NSObject
@property (nonatomic) BOOL isClientListEnabled;
- (nonnull instancetype)initWithSuitName:(NSString * _Nonnull)suitName OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) AFClientNetworkList * _Nullable list;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK13Configuration")
@interface Configuration : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP20VPNTunnelProviderSDK9LogSource_")
@protocol LogSource
- (void)logWithString:(NSString * _Nonnull)string;
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK16ConsoleLogSource")
@interface ConsoleLogSource : NSObject <LogSource>
- (void)logWithString:(NSString * _Nonnull)string;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSURL;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK13FileLogSource")
@interface FileLogSource : NSObject <LogSource>
- (nonnull instancetype)initWithFileURL:(NSURL * _Nonnull)fileURL OBJC_DESIGNATED_INITIALIZER;
- (void)logWithString:(NSString * _Nonnull)string;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, FireshieldListResourceType, open) {
  FireshieldListResourceTypeDomain = 0,
  FireshieldListResourceTypeUrl = 1,
};


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK17FireshieldManager")
@interface FireshieldManager : NSObject
- (BOOL)addItems:(NSArray<NSString *> * _Nonnull)items withResourceType:(enum FireshieldListResourceType)resourceType category:(AFCategoryType * _Nonnull)category error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeItems:(NSArray<NSString *> * _Nonnull)items withResourceType:(enum FireshieldListResourceType)resourceType category:(AFCategoryType * _Nonnull)category error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








SWIFT_CLASS("_TtC20VPNTunnelProviderSDK17NetworkIdentifier")
@interface NetworkIdentifier : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable ssid;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK15NetworkObserver")
@interface NetworkObserver : NSObject
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK18SessionDataStorage")
@interface SessionDataStorage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC20VPNTunnelProviderSDK14StartupOptions")
@interface StartupOptions : NSObject
@property (nonatomic, readonly) BOOL isBypassEnabled;
- (nonnull instancetype)initWithIsBypassEnabled:(BOOL)isBypassEnabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a single ping instance. A ping instance has a single destination.
SWIFT_CLASS("_TtC20VPNTunnelProviderSDK10SwiftyPing")
@interface SwiftyPing : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK16TunnelDataSource")
@interface TunnelDataSource : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

SWIFT_CLASS_NAMED("TunnelProvider")
@interface AFHydraTunnelProvider : AFLegacyHydraTunnelProvider
- (void)startTunnelWithOptions:(NSDictionary<NSString *, NSObject *> * _Nullable)options completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
- (void)stopTunnelWithReason:(NEProviderStopReason)reason completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)sleepWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)handleAppMessage:(NSData * _Nonnull)messageData completionHandler:(void (^ _Nullable)(NSData * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_CLASS_NAMED("TunnelProviderDelegateImpl")
@interface TunnelProviderDelegateImpl : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_CLASS("_TtC20VPNTunnelProviderSDK16UCRConfiguration")
@interface UCRConfiguration : NSObject
- (nonnull instancetype)initWithReportName:(NSString * _Nonnull)reportName cacheName:(NSString * _Nullable)cacheName appGroup:(NSString * _Nullable)appGroup keychainAccessGroup:(NSString * _Nullable)keychainAccessGroup isLoggingEnabled:(BOOL)isLoggingEnabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK8UCREvent")
@interface UCREvent : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name properties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK10UCRTracker")
@interface UCRTracker : NSObject
- (nonnull instancetype)initWithConfiguration:(UCRConfiguration * _Nonnull)configuration;
/// Registers app name. Will be included in auto collected properties.
/// Isn’t persisted between launches.
- (void)registerAppName:(NSString * _Nonnull)newValue;
/// Registers vpn protocol. Will be included in auto collected properties.
/// Isn’t persisted between launches.
- (void)registerServerProtocol:(NSString * _Nonnull)newValue;
/// Registers user token. Will be included in auto collected properties.
/// Isn’t persisted between launches.
- (void)registerServerToken:(NSString * _Nonnull)newValue;
/// Registers super properties. These properties have higher priority then
/// auto collected properties and lower priority then properties passed with event.
/// Aren’t persisted between launches.
- (void)registerProperties:(NSDictionary<NSString *, id> * _Nullable)newValue;
/// Registers callback that will be called after every queued event with assotiated data.
- (void)registerEventLoggingCallback:(void (^ _Nullable)(NSString * _Nonnull, NSDate * _Nonnull, NSDictionary<NSString *, id> * _Nonnull))callback;
/// Sets automatic event sending timer interval.
/// Values less or equal to <code>0</code>mean disable timer.
- (void)setSendEventsInterval:(NSTimeInterval)newValue;
/// Enables/disables automatic event sending when app enters background.
- (void)setShouldSendEventsOnBackground:(BOOL)newValue;
/// Adds event to queue.
/// \param completion 
/// Completion handler with result. Will be dispatched to the main queue.
///
- (void)trackEvent:(NSString * _Nonnull)event withProperties:(NSDictionary<NSString *, id> * _Nullable)properties completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Adds events to queue.
/// \param completion 
/// Completion handler with result. Will be dispatched to the main queue.
///
- (void)trackEvents:(NSArray<UCREvent *> * _Nonnull)events withCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sends collected events to the server.
/// \param completion 
/// Completion handler with result. Will be dispatched to the main queue.
/// <code>Int</code> value represents count of sended events.
///
- (void)sendEventsWithCompletion:(void (^ _Nullable)(NSInteger, NSError * _Nullable))completion;
/// Cancels events sending to server if it’s active.
- (void)cancelEventsSending;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface UCRTracker (SWIFT_EXTENSION(VPNTunnelProviderSDK))
/// Configures shared instance.
/// Should be called before first access to shared instance.
+ (void)configureSharedWithConfiguration:(UCRConfiguration * _Nonnull)config;
/// Shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UCRTracker * _Nonnull shared;)
+ (UCRTracker * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK22UserDefaultsRepository")
@interface UserDefaultsRepository : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

SWIFT_CLASS("_TtC20VPNTunnelProviderSDK17VPNConnectionData")
@interface VPNConnectionData : NSObject
@property (nonatomic, readonly) BOOL hasActiveSession;
- (void)registerStartAttemptWithTriggeredByUser:(BOOL)triggeredByUser parentConnectionID:(NSString * _Nullable)parentConnectionID;
- (void)registerDidStart;
- (void)registerWillStopWithTriggeredByUser:(BOOL)triggeredByUser;
- (void)registerStartAttemptAsLastFailed;
- (void)setConnectionInfoWithServerIP:(NSString * _Nullable)serverIP sessionID:(NSString * _Nullable)sessionID;
- (void)setCountryCode:(NSString * _Nullable)newValue;
- (void)setTrafficInfoWithBytesIn:(NSNumber * _Nullable)bytesIn bytesOut:(NSNumber * _Nullable)bytesOut;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC20VPNTunnelProviderSDK6VPNLog")
@interface VPNLog : NSObject
+ (void)setLogSourceWithArray:(NSArray<id <LogSource>> * _Nonnull)array;
+ (void)verbose:(NSString * _Nonnull)string;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, VPNProtocolType, open) {
  VPNProtocolTypeHydra = 0,
  VPNProtocolTypeIpsec = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
