// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VPNTunnelProviderSDK
import SystemConfiguration.CaptiveNetwork
import Foundation
import Swift
import SystemConfiguration
import UIKit
@_exported import VPNTunnelProviderSDK
@_hasMissingDesignatedInitializers public class PartnerAPI {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class StartupOptions : ObjectiveC.NSObject {
  @objc final public let isBypassEnabled: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
extension PartnerAPI {
  public enum APIError : Swift.Error {
    case unauthorized
    case notAuthorized
    case vpnServerUnavailable
    case userSuspended
    case sessionExceed
    case trafficExceed
    case internalServerError
    case deviceExceed
    case invalidPurchase
    case unknownServerResponse
    case badRequest(message: Swift.String?)
    case failedResult(resultString: Swift.String)
    case networkError(Swift.Error)
  }
}
public struct ServerNode : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ServerCredentials : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FireshieldCategory {
  public enum CategoryType {
    case safe
    case unsafe
    case unsafeCustom(_: Swift.String)
    case custom(_: Swift.String)
  }
  public let type: VPNTunnelProviderSDK.FireshieldCategory.CategoryType
  public static func block(category: VPNTunnelProviderSDK.FireshieldCategory.CategoryType) -> VPNTunnelProviderSDK.FireshieldCategory
  public static func proxy(category: VPNTunnelProviderSDK.FireshieldCategory.CategoryType) -> VPNTunnelProviderSDK.FireshieldCategory
  public static func bypass(category: VPNTunnelProviderSDK.FireshieldCategory.CategoryType) -> VPNTunnelProviderSDK.FireshieldCategory
  public static func alert(category: VPNTunnelProviderSDK.FireshieldCategory.CategoryType) -> VPNTunnelProviderSDK.FireshieldCategory
}
extension FireshieldCategory.CategoryType : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public static func == (a: VPNTunnelProviderSDK.FireshieldCategory.CategoryType, b: VPNTunnelProviderSDK.FireshieldCategory.CategoryType) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc public class AFCategoryType : ObjectiveC.NSObject {
  @objc public static var safe: VPNTunnelProviderSDK.AFCategoryType {
    @objc get
  }
  @objc public static var unsafe: VPNTunnelProviderSDK.AFCategoryType {
    @objc get
  }
  @objc public var representation: Swift.String {
    @objc get
  }
  @objc public init(custom: Swift.String)
  @objc public init(unsafeCustom: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class AFFireshieldCategory : ObjectiveC.NSObject {
  @objc public enum Action : Swift.Int {
    case proxy, bypass, block, alert
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static func block(category: VPNTunnelProviderSDK.AFCategoryType) -> VPNTunnelProviderSDK.AFFireshieldCategory
  @objc public static func proxy(category: VPNTunnelProviderSDK.AFCategoryType) -> VPNTunnelProviderSDK.AFFireshieldCategory
  @objc public static func bypass(category: VPNTunnelProviderSDK.AFCategoryType) -> VPNTunnelProviderSDK.AFFireshieldCategory
  @objc public static func alert(category: VPNTunnelProviderSDK.AFCategoryType) -> VPNTunnelProviderSDK.AFFireshieldCategory
  @objc public static func categoryName(from category: VPNTunnelProviderSDK.AFCategoryType) -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class AFClientNetworkList : ObjectiveC.NSObject {
  @objc public var configurations: [VPNTunnelProviderSDK.AFClientNetworkConfiguration] {
    @objc get
  }
  @objc public func find(ssid: Swift.String) -> VPNTunnelProviderSDK.AFClientNetworkConfiguration?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AFClientNetworkConfiguration : ObjectiveC.NSObject {
  @objc public enum AFClientNetworkConfigurationAction : Swift.Int {
    case enable, disable, empty
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var action: VPNTunnelProviderSDK.AFClientNetworkConfiguration.AFClientNetworkConfigurationAction {
    @objc get
  }
  @objc public var networkType: Swift.String? {
    @objc get
  }
  @objc public var ssid: [Swift.String]? {
    @objc get
  }
  @objc public var bssid: [Swift.String]? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public struct ClientNetworkList : Swift.Encodable {
  public var configurations: [VPNTunnelProviderSDK.ClientNetworkConfiguration]
  public init(from decoder: Swift.Decoder) throws
  public func find(ssid: Swift.String, bssid: Swift.String) -> VPNTunnelProviderSDK.ClientNetworkConfiguration?
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ClientNetworkConfiguration : Swift.Codable {
  public enum Action : Swift.String, Swift.Codable {
    case enable
    case disable
    case empty
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public let action: VPNTunnelProviderSDK.ClientNetworkConfiguration.Action
  public let networkType: Swift.String?
  public let ssid: [Swift.String]?
  public let bssid: [Swift.String]?
  public var isCommonConfig: Swift.Bool {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension VPNTunnelProviderSDK.AFFireshieldCategory.Action : Swift.Equatable {}
extension VPNTunnelProviderSDK.AFFireshieldCategory.Action : Swift.Hashable {}
extension VPNTunnelProviderSDK.AFFireshieldCategory.Action : Swift.RawRepresentable {}
extension VPNTunnelProviderSDK.AFClientNetworkConfiguration.AFClientNetworkConfigurationAction : Swift.Equatable {}
extension VPNTunnelProviderSDK.AFClientNetworkConfiguration.AFClientNetworkConfigurationAction : Swift.Hashable {}
extension VPNTunnelProviderSDK.AFClientNetworkConfiguration.AFClientNetworkConfigurationAction : Swift.RawRepresentable {}
extension VPNTunnelProviderSDK.ClientNetworkList : Swift.Decodable {}
extension VPNTunnelProviderSDK.ClientNetworkConfiguration.Action : Swift.Equatable {}
extension VPNTunnelProviderSDK.ClientNetworkConfiguration.Action : Swift.Hashable {}
extension VPNTunnelProviderSDK.ClientNetworkConfiguration.Action : Swift.RawRepresentable {}
