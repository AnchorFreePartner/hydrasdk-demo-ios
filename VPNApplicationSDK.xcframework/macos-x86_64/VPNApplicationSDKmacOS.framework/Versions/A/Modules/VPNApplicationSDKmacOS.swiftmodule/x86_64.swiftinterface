// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-macos10.12 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VPNApplicationSDKmacOS
import SystemConfiguration.CaptiveNetwork
import Cocoa
import CoreTelephony
import Darwin
import Dispatch
import Foundation
import NetworkExtension
import Swift
import SystemConfiguration
@_exported import VPNApplicationSDKmacOS
@_hasMissingDesignatedInitializers public class DeviceInfo {
  public static func collect(forCarrierID carrierID: Swift.String, deviceType: Swift.String) -> [Swift.String : Swift.String]
  @objc deinit
}
public struct Purchase {
  public let result: [Swift.String : Any]
  public init(result: [Swift.String : Any])
}
public struct RemainingTraffic {
  public let sessionStartTime: Swift.UInt64
  public let trafficUsageLimit: Swift.UInt64
  public let trafficUsed: Swift.UInt64
  public let trafficRemaining: Swift.UInt64
}
extension RemainingTraffic : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class AFRemainingTraffic : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var sessionStartTime: Foundation.NSNumber {
    @objc get
  }
  @objc public var trafficUsageLimit: Foundation.NSNumber {
    @objc get
  }
  @objc public var trafficUsed: Foundation.NSNumber {
    @objc get
  }
  @objc public var trafficRemaining: Foundation.NSNumber {
    @objc get
  }
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
public enum VPNSDKError : Swift.Error {
  case emptyToken
  case invalidToken
  case alreadyConnected
  case inProgress
  case notConnected
  case logoutWhileConnected
  case notPermitted
  case configurationMismatch
  public static func == (a: VPNApplicationSDKmacOS.VPNSDKError, b: VPNApplicationSDKmacOS.VPNSDKError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public typealias UserCompletion = (Swift.Error?, VPNApplicationSDKmacOS.User?) -> Swift.Void
public typealias LogoutCompletion = (Swift.Error?) -> Swift.Void
public typealias VirtualLocationsCompletion = (Swift.Error?, [VPNApplicationSDKmacOS.VirtualLocation]?) -> Swift.Void
public typealias ProfileCompletion = (Swift.Error?) -> Swift.Void
public typealias StartStateCompletion = (Swift.Error?, VPNApplicationSDKmacOS.VirtualLocation?) -> Swift.Void
public typealias StateCompletion = (Swift.Error?) -> Swift.Void
public typealias PurchaseCompletion = (Swift.Error?, VPNApplicationSDKmacOS.Purchase?) -> Swift.Void
public typealias TrafficCountersCompletion = (VPNApplicationSDKmacOS.TrafficCounters?) -> Swift.Void
public typealias CredentialsCompletion = (Swift.Error?, VPNApplicationSDKmacOS.Credential?) -> Swift.Void
public typealias RemainingTrafficCompletion = (Swift.Error?, VPNApplicationSDKmacOS.RemainingTraffic?) -> Swift.Void
public typealias RemoteConfigCompletion = (Swift.Error?, VPNApplicationSDKmacOS.RemoteConfig?) -> Swift.Void
public typealias ScannedConnectionsCompletion = (Swift.Error?, Swift.UInt?) -> Swift.Void
public struct PrimitiveSequence<Trait, Element> {
}
public struct VirtualLocation : Swift.Codable, Swift.Equatable {
  public let code: Swift.String
  public let serversCount: Swift.Int
  public let groupName: Swift.String
  public var displayName: Swift.String {
    get
  }
  public init(code: Swift.String, serversCount: Swift.Int, groupName: Swift.String? = nil)
  public static func optimal() -> VPNApplicationSDKmacOS.VirtualLocation
  public func isOptimal() -> Swift.Bool
  public static func == (lhs: VPNApplicationSDKmacOS.VirtualLocation, rhs: VPNApplicationSDKmacOS.VirtualLocation) -> Swift.Bool
  public static func != (lhs: VPNApplicationSDKmacOS.VirtualLocation, rhs: VPNApplicationSDKmacOS.VirtualLocation) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class AFVirtualLocation : ObjectiveC.NSObject {
  @objc public var code: Foundation.NSString {
    @objc get
  }
  @objc public var serversCount: Swift.Int {
    @objc get
  }
  @objc public var groupName: Foundation.NSString {
    @objc get
  }
  @objc public static func locationWith(code: Swift.String) -> VPNApplicationSDKmacOS.AFVirtualLocation
  @objc public static func optimal() -> VPNApplicationSDKmacOS.AFVirtualLocation
  @objc deinit
  @objc override dynamic public init()
}
public struct RemoteConfig : Swift.Decodable {
  public let isOptimalLocationDisabled: Swift.Bool
  public let bypassListFilename: Swift.String?
  public let clientNetworkListFilename: Swift.String?
  public let configDictionary: [Swift.String : Any]?
  public var supportEmails: [Swift.String] {
    get
  }
  public var fireshieldConfig: VPNApplicationSDKmacOS.FireshieldRemoteConfig?
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class AFRemoteConfig : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var isOptimalLocationDisabled: Swift.Bool {
    @objc get
  }
  @objc public var bypassListFilename: Swift.String? {
    @objc get
  }
  @objc public var clientNetworkListFilename: Swift.String? {
    @objc get
  }
  @objc public var configDictionary: [Swift.String : Any]? {
    @objc get
  }
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc public func supportEmails() -> [Swift.String]
  @objc deinit
  @objc override dynamic public init()
}
public struct FireshieldCategory {
  public enum CategoryType {
    case safe
    case unsafe
    case unsafeCustom(_: Swift.String)
    case custom(_: Swift.String)
  }
  public let type: VPNApplicationSDKmacOS.FireshieldCategory.CategoryType
  public static func block(category: VPNApplicationSDKmacOS.FireshieldCategory.CategoryType) -> VPNApplicationSDKmacOS.FireshieldCategory
  public static func proxy(category: VPNApplicationSDKmacOS.FireshieldCategory.CategoryType) -> VPNApplicationSDKmacOS.FireshieldCategory
  public static func bypass(category: VPNApplicationSDKmacOS.FireshieldCategory.CategoryType) -> VPNApplicationSDKmacOS.FireshieldCategory
  public static func alert(category: VPNApplicationSDKmacOS.FireshieldCategory.CategoryType) -> VPNApplicationSDKmacOS.FireshieldCategory
}
extension FireshieldCategory : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension FireshieldCategory.CategoryType : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public static func == (a: VPNApplicationSDKmacOS.FireshieldCategory.CategoryType, b: VPNApplicationSDKmacOS.FireshieldCategory.CategoryType) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc public class AFCategoryType : ObjectiveC.NSObject {
  @objc public static var safe: VPNApplicationSDKmacOS.AFCategoryType {
    @objc get
  }
  @objc public static var unsafe: VPNApplicationSDKmacOS.AFCategoryType {
    @objc get
  }
  @objc public var representation: Swift.String {
    @objc get
  }
  @objc public init(custom: Swift.String)
  @objc public init(unsafeCustom: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class AFFireshieldCategory : ObjectiveC.NSObject {
  @objc public enum Action : Swift.Int {
    case proxy, bypass, block, alert
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static func block(category: VPNApplicationSDKmacOS.AFCategoryType) -> VPNApplicationSDKmacOS.AFFireshieldCategory
  @objc public static func proxy(category: VPNApplicationSDKmacOS.AFCategoryType) -> VPNApplicationSDKmacOS.AFFireshieldCategory
  @objc public static func bypass(category: VPNApplicationSDKmacOS.AFCategoryType) -> VPNApplicationSDKmacOS.AFFireshieldCategory
  @objc public static func alert(category: VPNApplicationSDKmacOS.AFCategoryType) -> VPNApplicationSDKmacOS.AFFireshieldCategory
  @objc public static func categoryName(from category: VPNApplicationSDKmacOS.AFCategoryType) -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
extension Hooks {
  public typealias DefaultErrorHandler = ([Swift.String], Swift.Error) -> Swift.Void
  public typealias CustomCaptureSubscriptionCallstack = () -> [Swift.String]
}
public enum Event<Element> {
  case next(Element)
  case error(Swift.Error)
  case completed
}
extension Event : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public enum Hooks {
}
public struct FireshieldRule {
  public let filePath: Swift.String
  public let category: VPNApplicationSDKmacOS.FireshieldCategory.CategoryType
  public static func rule(withFileName fileName: Swift.String, category: VPNApplicationSDKmacOS.FireshieldCategory.CategoryType) throws -> VPNApplicationSDKmacOS.FireshieldRule
  public static func rule(withDomains domains: [Swift.String], category: VPNApplicationSDKmacOS.FireshieldCategory.CategoryType) throws -> VPNApplicationSDKmacOS.FireshieldRule
}
@_hasMissingDesignatedInitializers @objc public class AFFireshieldRule : ObjectiveC.NSObject {
  @objc public static func rule(withFileName fileName: Swift.String, category: VPNApplicationSDKmacOS.AFCategoryType) throws -> VPNApplicationSDKmacOS.AFFireshieldRule
  @objc deinit
  @objc override dynamic public init()
}
public enum TakeUntilBehavior {
  case inclusive
  case exclusive
  public static func == (a: VPNApplicationSDKmacOS.TakeUntilBehavior, b: VPNApplicationSDKmacOS.TakeUntilBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum HydraError : Swift.Error {
  case notConfigured
  public static func == (a: VPNApplicationSDKmacOS.HydraError, b: VPNApplicationSDKmacOS.HydraError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public enum VPNState : Swift.Int {
  case invalid
  case connecting
  case connected
  case disconnecting
  case disconnected
  case idle
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PartnerAPI {
  public enum APIError : Swift.Error {
    case unauthorized
    case notAuthorized
    case vpnServerUnavailable
    case userSuspended
    case sessionExceed
    case trafficExceed
    case internalServerError
    case deviceExceed
    case invalidPurchase
    case unknownServerResponse
    case badRequest(message: Swift.String?)
    case failedResult(resultString: Swift.String)
    case networkError(Swift.Error)
  }
}
public struct TrafficCounters : Swift.Decodable {
  public let received: Swift.UInt64
  public let transmitted: Swift.UInt64
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class AFTrafficCounters : ObjectiveC.NSObject {
  @objc public var received: Swift.UInt64 {
    @objc get
  }
  @objc public var transmitted: Swift.UInt64 {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public enum PartnerAPI {
}
@objc public enum AFAPIError : Swift.Int {
  case undefined = 101
  case sessionExceed = 102
  case trafficExceed = 103
  case unauthorized = 104
  case userSuspended = 105
  case vpnServerUnavailable = 106
  case internalServerError = 107
  case deviceExceed = 108
  case networkError = 109
  case invalidPurchase = 110
  case unknownServerResponse = 111
  case notAuthorized = 112
  case badRequest = 113
  case failedResult = 114
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PartnerAPI.APIError : Foundation.LocalizedError, Foundation.CustomNSError {
  public var errorDescription: Swift.String? {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public static var errorDomain: Swift.String {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public struct ServerNode : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ServerCredentials : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Credentials : Swift.Decodable {
  public let username: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct HistoricalSchedulerTimeConverter {
  public typealias VirtualTimeUnit = VPNApplicationSDKmacOS.RxTime
  public typealias VirtualTimeIntervalUnit = Foundation.TimeInterval
}
extension KeyedEncodingContainer {
  public mutating func encode(_ value: [Swift.String : Any], forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encode(_ value: [Any], forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encodeIfPresent(_ value: [Swift.String : Any]?, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encodeIfPresent(_ value: [Any]?, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
}
public protocol Credential {
  var config: [Swift.String : Any] { get }
  var countryCode: Swift.String? { get }
  var transportConfig: Any? { get }
}
extension AFHydraConfiguration {
  public var currentFireshieldMode: VPNApplicationSDKmacOS.FireshieldConfig.FireshieldMode {
    get
  }
  public var config: [Swift.String : Any] {
    get
  }
}
public typealias RxTimeInterval = Dispatch.DispatchTimeInterval
public typealias RxTime = Foundation.Date
public enum SubjectLifetimeScope {
  case whileConnected
  case forever
  public static func == (a: VPNApplicationSDKmacOS.SubjectLifetimeScope, b: VPNApplicationSDKmacOS.SubjectLifetimeScope) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct FireshieldRemoteConfig : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
infix operator ~= : DefaultPrecedence
public struct HydraConfiguration {
  public let hostURL: Swift.String?
  public let carrierID: Swift.String
  public let extensionBundleID: Swift.String
  public let groupID: Swift.String
  public let profileName: Swift.String
  public let debugLoggingEnabled: Swift.Bool
  public let serverAddressDisplayName: Swift.String?
  public let dnsAddress: Swift.String?
  public let bypassDomains: [Swift.String]?
  public let isBypassEnabled: Swift.Bool
  public let isVPNIconFixEnabled: Swift.Bool
  public let isOnDemandEnabled: Swift.Bool
  public let onDemandRules: [NetworkExtension.NEOnDemandRule]?
  public let fireshieldConfig: VPNApplicationSDKmacOS.FireshieldConfig
  public let deviceType: Swift.String
  public init(hostURL: Swift.String?, carrierID: Swift.String, extensionBundleID: Swift.String, groupID: Swift.String, profileName: Swift.String = "HydraSDK", debugLogging: Swift.Bool = false, fireshieldConfig: VPNApplicationSDKmacOS.FireshieldConfig, serverAddressDisplayName: Swift.String? = nil, dnsAddress: Swift.String? = nil, bypassDomains: [Swift.String]? = nil, onDemandRules: [NetworkExtension.NEOnDemandRule]? = nil, isBypassEnabled: Swift.Bool = false, isVPNIconFixEnabled: Swift.Bool = false, isOnDemandEnabled: Swift.Bool = false, isClientListEnabled: Swift.Bool = false, deviceType: Swift.String = "iOS")
}
@_hasMissingDesignatedInitializers @objc public class HydraSDKConfiguration : ObjectiveC.NSObject {
  public var hostURL: Foundation.NSString? {
    get
  }
  public var carrierID: Foundation.NSString {
    get
  }
  public var extensionBundleID: Foundation.NSString {
    get
  }
  public var groupID: Foundation.NSString {
    get
  }
  public var profileName: Foundation.NSString {
    get
  }
  public var debugLogging: Swift.Bool {
    get
  }
  public var fireshieldConfig: VPNApplicationSDKmacOS.FireshieldConfig {
    get
  }
  public var serverAddressDisplayName: Foundation.NSString? {
    get
  }
  public var dnsAddress: Foundation.NSString? {
    get
  }
  public var bypassDomains: [Foundation.NSString]? {
    get
  }
  public var onDemandRules: [NetworkExtension.NEOnDemandRule]? {
    get
  }
  public var isBypassEnabled: Swift.Bool {
    get
  }
  public var isVPNIconFixEnabled: Swift.Bool {
    get
  }
  public var isOnDemandEnabled: Swift.Bool {
    get
  }
  public var deviceType: Foundation.NSString {
    get
  }
  @objc public init(hostURL: Foundation.NSString?, carrierID: Foundation.NSString, extensionBundleID: Foundation.NSString, groupID: Foundation.NSString, profileName: Foundation.NSString = "HydraSDK", debugLogging: Swift.Bool = false, fireshieldConfig: VPNApplicationSDKmacOS.FireshieldConfig, serverAddressDisplayName: Foundation.NSString? = nil, dnsAddress: Foundation.NSString? = nil, bypassDomains: [Foundation.NSString]? = nil, onDemandRules: [NetworkExtension.NEOnDemandRule]? = nil, isBypassEnabled: Swift.Bool = false, isVPNIconFixEnabled: Swift.Bool = false, isOnDemandEnabled: Swift.Bool = false, deviceType: Foundation.NSString = "iOS")
  @objc deinit
  @objc override dynamic public init()
}
public enum AuthMethodType : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  case anonymous
  case oauth
  case facebook
  case google
  case twitter
  case github
  case firebase
  case custom(Swift.String)
  public var rawValue: VPNApplicationSDKmacOS.AuthMethodType.RawValue {
    get
  }
}
@objc public enum AFAuthMethodType : Swift.Int {
  case anonymous, oauth, facebook, google, twitter, github, firebase
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct AuthMethod {
  public init(type: VPNApplicationSDKmacOS.AuthMethodType, token: Swift.String?)
  public static func anonymous() -> VPNApplicationSDKmacOS.AuthMethod
}
@_hasMissingDesignatedInitializers @objc public class AFAuthMethod : ObjectiveC.NSObject {
  @objc public static func anonymous() -> VPNApplicationSDKmacOS.AFAuthMethod
  @objc public static func oauth(token: Swift.String?) -> VPNApplicationSDKmacOS.AFAuthMethod
  @objc public static func facebook(token: Swift.String?) -> VPNApplicationSDKmacOS.AFAuthMethod
  @objc public static func google(token: Swift.String?) -> VPNApplicationSDKmacOS.AFAuthMethod
  @objc public static func twitter(token: Swift.String?) -> VPNApplicationSDKmacOS.AFAuthMethod
  @objc public static func github(token: Swift.String?) -> VPNApplicationSDKmacOS.AFAuthMethod
  @objc public static func firebase(token: Swift.String?) -> VPNApplicationSDKmacOS.AFAuthMethod
  @objc public static func custom(methodName: Swift.String, token: Swift.String?) -> VPNApplicationSDKmacOS.AFAuthMethod
  @objc deinit
  @objc override dynamic public init()
}
public struct Reactive<Base> {
  public let base: Base
  public init(_ base: Base)
}
public struct SubscriberPurchase : Swift.Codable {
  public let id: Swift.Int
  public let type: Swift.String
  public let time: Foundation.Date
  public let isActive: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Subscriber : Swift.Codable {
  public let subscriberID: Swift.Int
  public let activatedDevices: Swift.Int
  public let activeSessions: Swift.Int
  public let name: Swift.String
  public let extref: Swift.String
  public let carrierID: Swift.String
  public let bundle: VPNApplicationSDKmacOS.Bundle
  public let socialProfiles: [Swift.String : Any]
  public let purchases: [VPNApplicationSDKmacOS.SubscriberPurchase]
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public init(subscriberID: Swift.Int, activatedDevices: Swift.Int, activeSessions: Swift.Int, name: Swift.String, extref: Swift.String, carrierID: Swift.String, socialProfiles: [Swift.String : Swift.String], bundle: VPNApplicationSDKmacOS.Bundle, purchases: [VPNApplicationSDKmacOS.SubscriberPurchase])
}
public struct Bundle : Swift.Codable {
  public let licenseName: Swift.String
  public let bundleID: Swift.Int
  public let devicesLimit: Swift.Int
  public let sessionsLimit: Swift.Int
  public init(licenseName: Swift.String, bundleID: Swift.Int, devicesLimit: Swift.Int, sessionsLimit: Swift.Int)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct User : Swift.Codable {
  public let accessToken: Swift.String?
  public let subscriber: VPNApplicationSDKmacOS.Subscriber
  public init(accessToken: Swift.String?, subscriber: VPNApplicationSDKmacOS.Subscriber)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class AFBundle : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var licenseName: Swift.String {
    @objc get
  }
  @objc public var bundleID: Swift.Int {
    @objc get
  }
  @objc public var devicesLimit: Swift.Int {
    @objc get
  }
  @objc public var sessionsLimit: Swift.Int {
    @objc get
  }
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class AFSubscriber : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var subscriberID: Swift.Int {
    @objc get
  }
  @objc public var activatedDevices: Swift.Int {
    @objc get
  }
  @objc public var activeSessions: Swift.Int {
    @objc get
  }
  @objc public var name: Swift.String {
    @objc get
  }
  @objc public var extref: Swift.String {
    @objc get
  }
  @objc public var carrierID: Swift.String {
    @objc get
  }
  @objc public var bundle: VPNApplicationSDKmacOS.AFBundle {
    @objc get
  }
  @objc public var socialProfiles: [Swift.String : Any] {
    @objc get
  }
  @objc public var purchases: [VPNApplicationSDKmacOS.AFSubscriberPurchase] {
    @objc get
  }
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class AFUser : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var accessToken: Swift.String? {
    @objc get
  }
  @objc public var subscriber: VPNApplicationSDKmacOS.AFSubscriber {
    @objc get
  }
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class AFSubscriberPurchase : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public var id: Swift.Int {
    @objc get
  }
  @objc public var type: Swift.String {
    @objc get
  }
  @objc public var time: Foundation.Date {
    @objc get
  }
  @objc public var isActive: Swift.Bool {
    @objc get
  }
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class AFClientNetworkList : ObjectiveC.NSObject {
  @objc public var configurations: [VPNApplicationSDKmacOS.AFClientNetworkConfiguration] {
    @objc get
  }
  @objc public func find(ssid: Swift.String) -> VPNApplicationSDKmacOS.AFClientNetworkConfiguration?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AFClientNetworkConfiguration : ObjectiveC.NSObject {
  @objc public enum AFClientNetworkConfigurationAction : Swift.Int {
    case enable, disable, empty
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var action: VPNApplicationSDKmacOS.AFClientNetworkConfiguration.AFClientNetworkConfigurationAction {
    @objc get
  }
  @objc public var networkType: Swift.String? {
    @objc get
  }
  @objc public var ssid: [Swift.String]? {
    @objc get
  }
  @objc public var bssid: [Swift.String]? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public struct ClientNetworkList : Swift.Encodable {
  public var configurations: [VPNApplicationSDKmacOS.ClientNetworkConfiguration]
  public init(from decoder: Swift.Decoder) throws
  public func find(ssid: Swift.String, bssid: Swift.String) -> VPNApplicationSDKmacOS.ClientNetworkConfiguration?
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ClientNetworkConfiguration : Swift.Codable {
  public enum Action : Swift.String, Swift.Codable {
    case enable
    case disable
    case empty
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum NetworkType : Swift.String, Swift.Codable {
    case wwan
    case lan
    case wifi
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public let action: VPNApplicationSDKmacOS.ClientNetworkConfiguration.Action
  public let networkType: VPNApplicationSDKmacOS.ClientNetworkConfiguration.NetworkType?
  public let ssid: [Swift.String]?
  public let bssid: [Swift.String]?
  public var isCommonConfig: Swift.Bool {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class HydraSDK : ObjectiveC.NSObject {
  public var configuration: VPNApplicationSDKmacOS.HydraConfiguration {
    get
  }
  @available(swift, obsoleted: 1.0)
  @objc public var config: VPNApplicationSDKmacOS.HydraSDKConfiguration {
    @objc get
  }
  @objc public var isLoggedIn: Swift.Bool {
    @objc get
  }
  @objc public var token: Swift.String? {
    @objc get
  }
  @objc public var connectedDate: Foundation.Date? {
    @objc get
  }
  @objc public var state: VPNApplicationSDKmacOS.VPNState {
    @objc get
  }
  public var trafficCounters: VPNApplicationSDKmacOS.TrafficCounters? {
    get
  }
  public var clientNetworkList: VPNApplicationSDKmacOS.ClientNetworkList? {
    get
  }
  @objc public var deviceID: Swift.String {
    @objc get
  }
  @objc public var carrierID: Swift.String {
    @objc get
  }
  @objc public var isBypassEnabled: Swift.Bool {
    @objc get
  }
  @available(swift, obsoleted: 1.0)
  @objc public var counters: VPNApplicationSDKmacOS.AFTrafficCounters? {
    @objc get
  }
  @objc public static func sdkVersion() -> Swift.String
  @objc public var lastError: Swift.Error? {
    @objc get
  }
  @objc public var lastCategorization: VPNApplicationSDKmacOS.AFHydraCategorization? {
    @objc get
  }
  public var currentFireshieldMode: VPNApplicationSDKmacOS.FireshieldConfig.FireshieldMode? {
    get
  }
  public var remoteConfig: VPNApplicationSDKmacOS.RemoteConfig? {
    get
  }
  @available(swift, obsoleted: 1.0)
  @objc public var remoteConfiguration: VPNApplicationSDKmacOS.AFRemoteConfig? {
    @objc get
  }
  public init(configuration: VPNApplicationSDKmacOS.HydraConfiguration)
  @available(swift, obsoleted: 1.0)
  @objc convenience public init(configuration: VPNApplicationSDKmacOS.HydraSDKConfiguration)
  public func login(method: VPNApplicationSDKmacOS.AuthMethod, completion: @escaping VPNApplicationSDKmacOS.UserCompletion)
  @available(swift, obsoleted: 1.0)
  @objc public func login(method: VPNApplicationSDKmacOS.AFAuthMethod, completion: @escaping (Swift.Error?, VPNApplicationSDKmacOS.AFUser?) -> Swift.Void)
  public func logout(completion: @escaping VPNApplicationSDKmacOS.LogoutCompletion)
  @available(swift, obsoleted: 1.0)
  @objc(logout:) public func signOut(completion: @escaping ((Swift.Error?) -> Swift.Void))
  public func currentUser(completion: @escaping VPNApplicationSDKmacOS.UserCompletion)
  @available(swift, obsoleted: 1.0)
  @objc(currentUser:) public func user(completion: @escaping (Swift.Error?, VPNApplicationSDKmacOS.AFUser?) -> Swift.Void)
  public func virtualLocations(completion: @escaping VPNApplicationSDKmacOS.VirtualLocationsCompletion)
  @available(swift, obsoleted: 1.0)
  @objc(availableLocations:) public func availableLocations(completion: @escaping (Swift.Error?, [VPNApplicationSDKmacOS.AFVirtualLocation]?) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc public func purchase(token: Swift.String?, type: Swift.String = "apple", completion: @escaping (Swift.Error?, [Swift.String : Any]?) -> Swift.Void)
  public func purchase(purchaseToken: Swift.String?, type: Swift.String = "apple", completion: @escaping VPNApplicationSDKmacOS.PurchaseCompletion)
  public func loadCredentials(location: VPNApplicationSDKmacOS.VirtualLocation, completion: @escaping VPNApplicationSDKmacOS.CredentialsCompletion)
  @objc public func fetchRemoteConfig(completion: @escaping (Swift.Error?, VPNApplicationSDKmacOS.AFRemoteConfig?) -> Swift.Void)
  public func installProfile(completion: @escaping VPNApplicationSDKmacOS.ProfileCompletion)
  public func removeProfile(completion: @escaping VPNApplicationSDKmacOS.ProfileCompletion)
  public func stop(completion: @escaping VPNApplicationSDKmacOS.StateCompletion)
  @available(swift, obsoleted: 1.0)
  @objc(stop:) public func stopVPN(completion: @escaping (Swift.Error?) -> Swift.Void)
  public func start(location: VPNApplicationSDKmacOS.VirtualLocation?, completion: @escaping VPNApplicationSDKmacOS.StartStateCompletion)
  @available(swift, obsoleted: 1.0)
  @objc public func startWith(location: VPNApplicationSDKmacOS.AFVirtualLocation, completion: @escaping (Swift.Error?, VPNApplicationSDKmacOS.AFVirtualLocation?) -> Swift.Void)
  public func remainingTraffic(completion: @escaping VPNApplicationSDKmacOS.RemainingTrafficCompletion)
  @objc(remainingTraffic:) public func trafficRemaning(completion: @escaping (Swift.Error?, VPNApplicationSDKmacOS.AFRemainingTraffic?) -> Swift.Void)
  public func getTrafficCounters(completion: @escaping VPNApplicationSDKmacOS.TrafficCountersCompletion)
  @objc(scannedConnections:) public func requestScannedConnections(completion: @escaping (Swift.Error?, Swift.UInt) -> Swift.Void)
  public func update(configuration: VPNApplicationSDKmacOS.HydraConfiguration) throws
  @objc public func update(configuration: VPNApplicationSDKmacOS.HydraSDKConfiguration) throws
  @objc deinit
  @objc override dynamic public init()
}
extension NSNotification.Name {
  public static let HydraCategorizationDidChange: Foundation.Notification.Name
  public static let HydraStatusDidChange: Foundation.Notification.Name
}
@objc public class FireshieldConfig : ObjectiveC.NSObject {
  public enum Service : Swift.String {
    case sophos
    case bitdefender
    case ip
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
  }
  public enum Mode {
    case disabled
    case enabled
    case silent
    case vpn
    public static func == (a: VPNApplicationSDKmacOS.FireshieldConfig.Mode, b: VPNApplicationSDKmacOS.FireshieldConfig.Mode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @objc public enum FireshieldMode : Swift.Int {
    case disabled, enabled, silent, vpn
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum FireshieldService : Swift.Int {
    case sophos, bitdefender, ip
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public var isDNSModeEnabled: Swift.Bool
  public var fireshildMode: VPNApplicationSDKmacOS.FireshieldConfig.Mode {
    get
  }
  public init(mode: VPNApplicationSDKmacOS.FireshieldConfig.Mode)
  @objc convenience public init(fireshieldMode: VPNApplicationSDKmacOS.FireshieldConfig.FireshieldMode)
  public func add(service: VPNApplicationSDKmacOS.FireshieldConfig.Service)
  @objc(addService:) public func add(fireshieldService: VPNApplicationSDKmacOS.FireshieldConfig.FireshieldService)
  public func add(category: VPNApplicationSDKmacOS.FireshieldCategory)
  @objc(addCategory:) public func add(fireshieldCategory: VPNApplicationSDKmacOS.AFFireshieldCategory)
  public func add(rule: VPNApplicationSDKmacOS.FireshieldRule)
  @objc(addRule:) public func add(fireshieldRule: VPNApplicationSDKmacOS.AFFireshieldRule)
  @objc override dynamic public init()
  @objc deinit
}
extension VPNApplicationSDKmacOS.VPNSDKError : Swift.Equatable {}
extension VPNApplicationSDKmacOS.VPNSDKError : Swift.Hashable {}
extension VPNApplicationSDKmacOS.FireshieldConfig.Service : Swift.Equatable {}
extension VPNApplicationSDKmacOS.FireshieldConfig.Service : Swift.Hashable {}
extension VPNApplicationSDKmacOS.FireshieldConfig.Service : Swift.RawRepresentable {}
extension VPNApplicationSDKmacOS.AFFireshieldCategory.Action : Swift.Equatable {}
extension VPNApplicationSDKmacOS.AFFireshieldCategory.Action : Swift.Hashable {}
extension VPNApplicationSDKmacOS.AFFireshieldCategory.Action : Swift.RawRepresentable {}
extension VPNApplicationSDKmacOS.TakeUntilBehavior : Swift.Equatable {}
extension VPNApplicationSDKmacOS.TakeUntilBehavior : Swift.Hashable {}
extension VPNApplicationSDKmacOS.HydraError : Swift.Equatable {}
extension VPNApplicationSDKmacOS.HydraError : Swift.Hashable {}
extension VPNApplicationSDKmacOS.VPNState : Swift.Equatable {}
extension VPNApplicationSDKmacOS.VPNState : Swift.Hashable {}
extension VPNApplicationSDKmacOS.VPNState : Swift.RawRepresentable {}
extension VPNApplicationSDKmacOS.AFAPIError : Swift.Equatable {}
extension VPNApplicationSDKmacOS.AFAPIError : Swift.Hashable {}
extension VPNApplicationSDKmacOS.AFAPIError : Swift.RawRepresentable {}
extension VPNApplicationSDKmacOS.SubjectLifetimeScope : Swift.Equatable {}
extension VPNApplicationSDKmacOS.SubjectLifetimeScope : Swift.Hashable {}
extension VPNApplicationSDKmacOS.AFAuthMethodType : Swift.Equatable {}
extension VPNApplicationSDKmacOS.AFAuthMethodType : Swift.Hashable {}
extension VPNApplicationSDKmacOS.AFAuthMethodType : Swift.RawRepresentable {}
extension VPNApplicationSDKmacOS.AFClientNetworkConfiguration.AFClientNetworkConfigurationAction : Swift.Equatable {}
extension VPNApplicationSDKmacOS.AFClientNetworkConfiguration.AFClientNetworkConfigurationAction : Swift.Hashable {}
extension VPNApplicationSDKmacOS.AFClientNetworkConfiguration.AFClientNetworkConfigurationAction : Swift.RawRepresentable {}
extension VPNApplicationSDKmacOS.ClientNetworkList : Swift.Decodable {}
extension VPNApplicationSDKmacOS.ClientNetworkConfiguration.Action : Swift.Equatable {}
extension VPNApplicationSDKmacOS.ClientNetworkConfiguration.Action : Swift.Hashable {}
extension VPNApplicationSDKmacOS.ClientNetworkConfiguration.Action : Swift.RawRepresentable {}
extension VPNApplicationSDKmacOS.ClientNetworkConfiguration.NetworkType : Swift.Equatable {}
extension VPNApplicationSDKmacOS.ClientNetworkConfiguration.NetworkType : Swift.Hashable {}
extension VPNApplicationSDKmacOS.ClientNetworkConfiguration.NetworkType : Swift.RawRepresentable {}
extension VPNApplicationSDKmacOS.FireshieldConfig.Mode : Swift.Equatable {}
extension VPNApplicationSDKmacOS.FireshieldConfig.Mode : Swift.Hashable {}
extension VPNApplicationSDKmacOS.FireshieldConfig.FireshieldMode : Swift.Equatable {}
extension VPNApplicationSDKmacOS.FireshieldConfig.FireshieldMode : Swift.Hashable {}
extension VPNApplicationSDKmacOS.FireshieldConfig.FireshieldMode : Swift.RawRepresentable {}
extension VPNApplicationSDKmacOS.FireshieldConfig.FireshieldService : Swift.Equatable {}
extension VPNApplicationSDKmacOS.FireshieldConfig.FireshieldService : Swift.Hashable {}
extension VPNApplicationSDKmacOS.FireshieldConfig.FireshieldService : Swift.RawRepresentable {}
